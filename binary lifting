int dp[200010][20];
vector<int>adj[200010];
void binary_lifting(int u,int p){
    dp[u][0]=p;
    for(int i=1;i<20;i++){
        if(dp[u][i-1]!=-1){
            dp[u][i]=dp[dp[u][i-1]][i-1];
        }else{
            dp[u][i]=-1;
        }
    }
    for(auto x:adj[u]){
        if(x==p)continue;
        binary_lifting(x,u);
    }
}
int lca(int a,int b){
    if(depth[a]<depth[b])swap(a,b);
    int d=depth[a]-depth[b];
    for(int i=19;i>=0;i--){
        if(d&(1<<i)){
            a=dp[a][i];
        }
    }
    if(a==b)return a;
    for(int i=19;i>=0;i--){
        if(dp[a][i]!=dp[b][i]){
            a=dp[a][i];b=dp[b][i];
        }
    }
    return dp[a][0];
}
int ancestor(int u,int k){
    if(k==0 || u==-1)return u;

    for(int i=19;i>=0;i--){
        if(k&(1<<i)){
            return ancestor(dp[u][i],k^(1<<i));
        }
    }
}
