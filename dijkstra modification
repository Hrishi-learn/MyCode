    int finalDestination(int n,int m,int k,vector<vector<int>>&roads){
        vector<pair<int,int>>adj[n+1];
        for(int i=0;i<roads.size();i++){
            adj[roads[i][0]].push_back({roads[i][1],roads[i][2]});
        }
        priority_queue<vector<ll>,vector<vector<ll>>,greater<vector<ll>>>pq;
        pq.push({0,0,k});
        vector<vector<ll>>dis(n+1,vector<ll>(k+1,INF));
        dis[0][k]=0;
        while(!pq.empty()){
            auto tp=pq.top();
            pq.pop();
            ll d=tp[0];
            int u=tp[1];
            int rem=tp[2];
            // if(d>dis[u])continue;
            for(auto it:adj[u]){
                int v=it.first;
                ll distance=it.second;
                if(distance+d<dis[v][rem]){
                    dis[v][rem]=distance+d;
                    pq.push({dis[v][rem],v,rem});
                }
                if((distance/2)+d<dis[v][rem-1] && rem){
                    dis[v][rem-1]=(distance/2)+d;
                    pq.push({dis[v][rem-1],v,rem-1});
                }
            }
        }
        ll ans=INF;
        for(int i=0;i<=k;i++){
            ans=min(ans,dis[n-1][i]);
        }
        return (ans==INF?-1:(int)ans);
    }
